cmake_minimum_required(VERSION 3.0.0)
project(compiled_program LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_FLAGS "-maes -mavx -mavx2 -march=native -Wall O3")
set(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

set(OMPDIR "/insert/ompi/install/dir/here")

find_package(Threads REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(OMPI)
find_package(CryptoPP REQUIRED)
find_package(GMP REQUIRED)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/build")

# base sources (NodeNetwork, NodeConfig, SMC_Utils)
file(GLOB SOURCES
      "smc-compute/*.cpp"
)

option(DEPLOYMENT "Deployment or benchmarking mode (default=Deployment)" ON) # ON by default
option(SHAMIR "Shamir secret sharing (default=ON)" ON) # ON by default
option(RSS "Replicated secret sharing (default=OFF)" OFF) # OFF by default

if(OMPI_FOUND)
      set(OMPI_INC "${OMPI_INCLUDES}")
endif()

INCLUDE_DIRECTORIES(
      "${GMP_INCLUDES}"
      "${CMAKE_SOURCE_DIR}/smc-compute"
      ${OMPI_INC}
)

if(SHAMIR)
      add_definitions(-D__SHAMIR__=1)
      add_definitions(-D__RSS__=0)
      INCLUDE_DIRECTORIES(
            "${CMAKE_SOURCE_DIR}/smc-compute/shamir"
            "${CMAKE_SOURCE_DIR}/smc-compute/ops/shamir"
      )
      file(GLOB TECHNIQUE
            "smc-compute/shamir/*.cpp"
            "smc-compute/ops/shamir/*.cpp"
      )
endif()

if(RSS)
      add_definitions(-D__RSS__=1)
      add_definitions(-D__SHAMIR__=0)
      INCLUDE_DIRECTORIES(
            "${CMAKE_SOURCE_DIR}/smc-compute/rss"
            "${CMAKE_SOURCE_DIR}/smc-compute/ops/rss"
      )
      file(GLOB TECHNIQUE
            "smc-compute/rss/*.cpp"
            "smc-compute/ops/rss/*.cpp"
      )
endif()

if(DEPLOYMENT)
      add_definitions(-D__DEPLOYMENT__=1)
else()
      add_definitions(-D__DEPLOYMENT__=0)
endif()

set(LIBS
      ${CMAKE_THREAD_LIBS_INIT}
      ${OPENSSL_LIBRARIES}
      ${CRYPTOPP_LIBRARIES}
      ${GMP_LIBRARIES}
)

if(OMPI_FOUND)
      list(APPEND LIBS ${OMPI_LIBRARIES})
endif()

add_executable(XXXXX XXXXX.cpp ${SOURCES} ${TECHNIQUE})

target_link_libraries(XXXXX ${LIBS})

add_custom_target(clean-all
      make clean && rm -fR ${CMAKE_BINARY_DIR}/CMakeCache.txt
      ${CMAKE_BINARY_DIR}/cmake_install.cmake
      ${CMAKE_BINARY_DIR}/Makefile
      ${CMAKE_BINARY_DIR}/CMakeFiles
      && rmdir ${CMAKE_BINARY_DIR}/build
)